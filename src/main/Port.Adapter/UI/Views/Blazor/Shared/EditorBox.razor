@using ei8.Cortex.Diary.Application.Neurons;
@using ei8.Cortex.Library.Client;
@using ei8.Cortex.Library.Common;
@using ei8.Cortex.Diary.Port.Adapter.UI.Common;
@using ei8.Cortex.Diary.Port.Adapter.UI.ViewModels;
@using ei8.Cortex.Diary.Port.Adapter.UI.Views.Blazor.ViewModels;
@using ei8.Cortex.Diary.Port.Adapter.UI.Views.Blazor.Modal;
@using neurUL.Cortex.Common;
@inject INeuronApplicationService neuronApplicationService;
@inject ITerminalApplicationService terminalApplicationService;
@inject IToastService toastService; 

<div class="container-fluid">
    <EditForm Model="@editorNeuronViewModel">
        <div class="row">
            <div class="col p-0">
                <div class="container-fluid">
                    @if (!(this.SelectedOption == ContextMenuOption.New || this.SelectedOption == ContextMenuOption.Delete))
                    {
                        <div class="row">
                            <div class="col p-0">
                                <p class="p-0 m-0 font-weight-bold">
                                    @this.GetOptionDescription()
                                </p>
                            </div>
                        </div>
                        // if not editing or, if editing non root
                        @if (this.SelectedOption != ContextMenuOption.Edit || this.editorNeuronViewModel.Type != RelativeType.NotSet)
                        {
                            <div class="row">
                                <div class="col p-0 pr-1 col-auto">
                                    <NullableInputSelect class="btn btn-secondary btn-sm dropdown-toggle" T="RelativeType" disabled="@(this.SelectedOption == ContextMenuOption.Edit)" @bind-Value="this.editorNeuronViewModel.Type">
                                        <option value="">--Select Type--</option>
                                        <option value="@RelativeType.Presynaptic">Sender</option>
                                        <option value="@RelativeType.Postsynaptic">Receiver</option>
                                    </NullableInputSelect>
                                </div>
                                <div class="col p-0 pr-1 col-auto">
                                    <NullableInputSelect class="btn btn-secondary btn-sm dropdown-toggle" T="NeurotransmitterEffect" disabled="@(this.SelectedOption == ContextMenuOption.Edit)" @bind-Value="this.editorNeuronViewModel.Effect">
                                        <option value="">--Select Effect--</option>
                                        <option value="@NeurotransmitterEffect.Excite">Excite</option>
                                        <option value="@NeurotransmitterEffect.Inhibit">Inhibit</option>
                                    </NullableInputSelect>
                                </div>
                                <div class="col pr-1 p-0">
                                    <InputNumber class="form-control-xs" placeholder="Strength" disabled="@(this.SelectedOption == ContextMenuOption.Edit)" @bind-Value="this.editorNeuronViewModel.Strength" />
                                </div>
                            </div>
                        }
                    }
                    @if (this.SelectedOption != ContextMenuOption.LinkRelative)
                    {
                        <div class="row">
                            <div class="col py-1 px-0">
                                <InputTextArea class="form-control w-100" placeholder="Tag" @bind-Value="@this.editorNeuronViewModel.Tag" rows="4" />
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="row">
                            <div class="col py-1 px-0">
                                <ListView Items="@this.editorNeuronViewModel.LinkCandidates" Render="@true">
                                    <ItemTemplate Context="itemContext">
                                        <ConditionalDisplay Show="@true">
                                            <li style="list-style:none" @key="@itemContext.Id">
                                                <input type="radio" id="@itemContext.Id" checked="@(this.RemovingLinkNeuron != null && this.RemovingLinkNeuron.Id == itemContext.Id)" @onchange="@(() => { this.RemovingLinkNeuron = itemContext; })" />
                                                <label for="@itemContext.Tag">@(!string.IsNullOrEmpty(itemContext.Tag) ? itemContext.Tag : " ")</label>
                                            </li>
                                        </ConditionalDisplay>
                                    </ItemTemplate>
                                </ListView>
                            </div>
                            <div class="col-auto p-0">
                                <div class="container">
                                    <div class="row">
                                        <div class="col-auto p-1">
                                            <button class="btn btn-secondary btn-sm" style="width:25px" @onclick="this.OnSearchLinkNeuron">+</button>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-auto pl-1">
                                            <button class="btn btn-secondary btn-sm" style="width:25px" @onclick="this.OnRemoveSelectedLinkNeuron">-</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                    <div class="row">
                        <div class="col-auto pb-1 pr-1 p-0">
                            <button class="btn btn-secondary btn-sm" disabled="@(this.SelectedOption == ContextMenuOption.Edit)" @onclick="this.OnSearchRegionNeuron">Region...</button>
                        </div>
                        <div class="col-auto pb-1 p-0">
                            <input class="form-control-sm" style="width:150px" readonly value="@this.editorNeuronViewModel.RegionTag" />
                        </div>
                    </div>
                </div>
            </div>
            <div class="p-1 flex-fixed-width-item">
                <div class="container h-100">
                    <div class="row h-50 justify-content-end">
                        <div class="col p-0">
                            <button class="btn btn-secondary btn-sm" style="width:80px" @onclick="OnCancel">Cancel</button>
                        </div>
                    </div>
                    <div class="row h-50 align-items-end justify-content-end">
                        <div class="col p-0">
                            <button class="btn btn-primary btn-sm" style="width:80px" @onclick="OnSend">Send</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </EditForm>
</div>
<NeuronSearchBox @bind-IsVisible="@this.IsSearchRegionNeuronVisible" @bind-SelectedNeuron="this.SelectedRegionNeuron" />
<NeuronSearchBox @bind-IsVisible="@this.IsSearchLinkNeuronVisible" @bind-SelectedNeuron="this.SelectedLinkNeuron" />

@code {
    private EditorNeuronViewModel editorNeuronViewModel = new EditorNeuronViewModel();

    [Parameter]
    public string AvatarUrl { get; set; }

    private UINeuron RemovingLinkNeuron { get; set; }

    private ContextMenuOption selectedOption;
    [Parameter]
    public ContextMenuOption SelectedOption
    {
        get => this.selectedOption;
        set
        {
            if (this.selectedOption != value)
            {
                this.selectedOption = value;

                if (this.SelectedOption == ContextMenuOption.Edit)
                {
                    if (this.selectedNeuron != null)
                    {
                        // similar to NeuronViewModelBase.SetNeuron
                        this.editorNeuronViewModel.Id = this.selectedNeuron.Neuron.Id;
                        this.editorNeuronViewModel.Tag = this.selectedNeuron.Tag;
                        this.editorNeuronViewModel.Type = this.selectedNeuron.Neuron.Type;
                        this.editorNeuronViewModel.RegionId = this.selectedNeuron.Neuron.Region.Id;
                        this.editorNeuronViewModel.RegionTag = this.selectedNeuron.Neuron.Region.Tag;
                        this.editorNeuronViewModel.Version = this.selectedNeuron.Neuron.Version;

                        if (this.selectedNeuron.Neuron.Terminal != null)
                        {
                            // TODO: this.TerminalId = neuron.Terminal.Id;
                            if (int.TryParse(this.selectedNeuron.Neuron.Terminal.Effect, out int ie))
                                this.editorNeuronViewModel.Effect = (NeurotransmitterEffect)ie;
                            if (float.TryParse(this.selectedNeuron.Neuron.Terminal.Strength, out float fs))
                                this.editorNeuronViewModel.Strength = fs;

                            // TODO: this.TerminalCreation = new AuthorEventInfo(neuron.Terminal.Creation);
                            //this.TerminalLastModification = new AuthorEventInfo(neuron.Terminal.LastModification);
                            //this.TerminalVersion = neuron.Terminal.Version;
                        }
                    }
                }

                this.SelectedOptionChanged.InvokeAsync(this.selectedOption);
            }
        }
    }

    [Parameter]
    public EventCallback<ContextMenuOption> SelectedOptionChanged { get; set; }

    private NeuronViewModel selectedNeuron;
    [Parameter]
    public NeuronViewModel SelectedNeuron
    {
        get => this.selectedNeuron;
        set
        {
            if (this.selectedNeuron != value)
            {
                this.selectedNeuron = value;
            }

            if (this.selectedNeuron == null)
                this.editorNeuronViewModel.Initialize();
        }
    }

    [Parameter]
    public EventCallback<NeuronViewModel> SelectedNeuronChanged { get; set; }


    private NeuronViewModel selectedRegionNeuron;
    private NeuronViewModel SelectedRegionNeuron
    {
        get => this.selectedRegionNeuron;
        set
        {
            if (this.selectedRegionNeuron != value)
            {
                this.selectedRegionNeuron = value;

                if (this.selectedRegionNeuron != null)
                {
                    this.editorNeuronViewModel.RegionId = this.selectedRegionNeuron.Neuron.Id;
                    this.editorNeuronViewModel.RegionTag = this.selectedRegionNeuron.Neuron.Tag;
                }
                else
                    this.editorNeuronViewModel.InitializeRegion();
            }
        }
    }

    private bool IsSearchRegionNeuronVisible { get; set; } = false;

    private NeuronViewModel selectedLinkNeuron;
    private NeuronViewModel SelectedLinkNeuron
    {
        get => this.selectedLinkNeuron;
        set
        {
            if (this.selectedLinkNeuron != value)
            {
                this.selectedLinkNeuron = value;

                if (this.selectedLinkNeuron != null)
                {
                    // add to linkcandidates
                    this.editorNeuronViewModel.LinkCandidates = this.editorNeuronViewModel.LinkCandidates.Append(this.selectedLinkNeuron.Neuron).ToArray();
                    this.selectedLinkNeuron = null;
                }
            }
        }
    }

    private bool IsSearchLinkNeuronVisible { get; set; } = false;

    private async Task OnSend()
    {
        if (
            // TODO: should be validated by the UI (javascript)
            // DEL: !string.IsNullOrEmpty(this.editorNeuronViewModel.Tag) &&
            QueryUrl.TryParse(this.AvatarUrl, out QueryUrl result)
            )
        {
            string description = string.Empty;
            try
            {
                switch (this.SelectedOption)
                {
                    case ContextMenuOption.New:
                        await this.neuronApplicationService.CreateNeuron(
                            result.AvatarUrl,
                            Guid.NewGuid().ToString(),
                            this.editorNeuronViewModel.Tag,
                            this.editorNeuronViewModel.RegionId
                            );
                        description = "Neuron created";
                        break;
                    case ContextMenuOption.Edit:
                        await this.neuronApplicationService.ChangeNeuronTag(result.AvatarUrl, this.editorNeuronViewModel.Id, this.editorNeuronViewModel.Tag, this.editorNeuronViewModel.Version);
                        description = "Neuron saved";
                        break;
                    case ContextMenuOption.AddRelative:
                        await ei8.Cortex.Diary.Port.Adapter.UI.ViewModels.Helper.CreateRelativeCore(
                            this.neuronApplicationService,
                            this.terminalApplicationService,
                            result.AvatarUrl,
                            this.editorNeuronViewModel.RegionId,
                            this.SelectedNeuron.Neuron.Id,
                            this.editorNeuronViewModel.Type.Value,
                            this.editorNeuronViewModel.Tag,
                            this.editorNeuronViewModel.Effect.Value,
                            this.editorNeuronViewModel.Strength.Value
                            );
                        description = "Relative added";
                        break;
                    case ContextMenuOption.LinkRelative:
                        await ei8.Cortex.Diary.Port.Adapter.UI.ViewModels.Helper.LinkRelativeCore(
                            this.terminalApplicationService,
                            result.AvatarUrl,
                            this.SelectedNeuron.Neuron.Id,
                            this.editorNeuronViewModel.Type.Value,
                            this.editorNeuronViewModel.LinkCandidates,
                            this.editorNeuronViewModel.Effect.Value,
                            this.editorNeuronViewModel.Strength.Value
                            );
                        description = "Relative linked";
                        break;
                }
                this.toastService.ShowSuccess($"{description} successfully.");
            }
            catch (Exception ex)
            {
                this.toastService.ShowError(ex.Message);
            }

            Blazor.Helper.ReinitializeOption(o => this.SelectedOption = o);
        }
    }

    private async Task OnCancel()
    {
        // TODO: ask user if sure to proceed, all unsaved changes (if any) will be lost
        Blazor.Helper.ReinitializeOption(o => this.SelectedOption = o);
    }

    private void OnSearchLinkNeuron()
    {
        this.IsSearchLinkNeuronVisible = true;
    }

    private void OnRemoveSelectedLinkNeuron()
    {
        var lcs = this.editorNeuronViewModel.LinkCandidates;
        lcs = lcs.Where(un => un.Id != this.RemovingLinkNeuron.Id).ToArray();
        this.editorNeuronViewModel.LinkCandidates = lcs;
        this.RemovingLinkNeuron = null;
    }

    private void OnSearchRegionNeuron()
    {
        this.IsSearchRegionNeuronVisible = true;
    }

    private string GetOptionDescription()
    {
        string result = string.Empty;
        switch (this.SelectedOption)
        {
            case ContextMenuOption.AddRelative:
                result = "Adding New Relative to '{0}'";
                break;
            case ContextMenuOption.LinkRelative:
                result = "Linking existing Relative to '{0}'";
                break;
            case ContextMenuOption.Edit:
                result = "Editing '{0}'";
                break;
        }
        return string.Format(result, (this.SelectedNeuron != null ? this.SelectedNeuron.Tag : string.Empty));
    }
}
