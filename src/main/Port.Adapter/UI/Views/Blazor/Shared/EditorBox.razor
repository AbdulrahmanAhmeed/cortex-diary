@using ei8.Cortex.Diary.Port.Adapter.UI.Views.Blazor.Data;
@using ei8.Cortex.Diary.Application.Neurons;
@using ei8.Cortex.Library.Client;   
@using ei8.Cortex.Library.Common;
@using ei8.Cortex.Diary.Port.Adapter.UI.Common;
@using ei8.Cortex.Diary.Port.Adapter.UI.ViewModels;
@using ei8.Cortex.Diary.Port.Adapter.UI.Views.Blazor.Modal;
@using neurUL.Cortex.Common;
@inject INeuronApplicationService NeuronApplicationService;
@inject ITerminalApplicationService TerminalApplicationService; 

<div class="container-fluid">
    <EditForm Model="@editorNeuronViewModel">
        <div class="row">
            <div class="col p-0">
                <div class="container-fluid">
                    @if (!(this.SelectedOption == ContextMenuOption.New || this.SelectedOption == ContextMenuOption.Delete))
                    {
                        <div class="row">
                            <div class="col p-0">
                                <p class="p-0 m-0 font-weight-bold">
                                    @(string.Format(this.GetOptionDescriptionFormat(), this.SelectedNeuron.Tag))
                                </p>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col p-0 pr-1 col-auto">
                                <NullableInputSelect class="btn btn-secondary btn-sm dropdown-toggle" T="RelativeType" @bind-Value="this.editorNeuronViewModel.RelativeType">
                                    <option value="">--Select Type--</option>
                                    <option value="@RelativeType.Postsynaptic">Postsynaptic</option>
                                    <option value="@RelativeType.Presynaptic">Presynaptic</option>
                                </NullableInputSelect>
                            </div>
                            <div class="col p-0 pr-1 col-auto">
                                <NullableInputSelect class="btn btn-secondary btn-sm dropdown-toggle" T="NeurotransmitterEffect" @bind-Value="this.editorNeuronViewModel.Effect">
                                    <option value="">--Select Effect--</option>
                                    <option value="@NeurotransmitterEffect.Excite">Excite</option>
                                    <option value="@NeurotransmitterEffect.Inhibit">Inhibit</option>
                                </NullableInputSelect>
                            </div>
                            <div class="col pr-1 p-0">
                                <InputNumber class="form-control-xs" placeholder="Strength" @bind-Value="this.editorNeuronViewModel.Strength" />
                            </div>
                        </div>
                    }
                    @if (this.SelectedOption != ContextMenuOption.LinkRelative)
                    {
                        <div class="row">
                            <div class="col py-1 px-0">
                                <InputTextArea class="form-control w-100" placeholder="Tag" @bind-Value="@this.editorNeuronViewModel.Tag" rows="4" />
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="row">
                            <div class="col py-1 px-0">
                                <InputTextArea class="form-control w-100" placeholder="Tag" @bind-Value="@this.editorNeuronViewModel.Tag" rows="4" />
                            </div>
                            <div class="col-auto p-0">
                                <div class="container">
                                    <div class="row">
                                        <div class="col-auto p-1">
                                            <button class="btn btn-secondary btn-sm" style="width:25px">+</button>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-auto pl-1">
                                            <button class="btn btn-secondary btn-sm" style="width:25px">-</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                    <div class="row">
                        <div class="col-auto pb-1 pr-1 p-0">
                            <button class="btn btn-secondary btn-sm" @onclick="OnSearchNeuron">Region...</button>
                        </div>
                        <div class="col-auto pb-1 p-0">
                            <input class="form-control-sm" style="width:150px" readonly value="@(this.RegionNeuron != null ? this.RegionNeuron.Tag : "[Base]")" />
                        </div>
                    </div>
                </div>
            </div>
            <div class="p-1 flex-fixed-width-item">
                <div class="container h-100">
                    <div class="row h-50 justify-content-end">
                        <div class="col p-0">
                            <button class="btn btn-secondary btn-sm" style="width:80px" @onclick="OnCancel">Cancel</button>
                        </div>
                    </div>
                    <div class="row h-50 align-items-end justify-content-end">
                        <div class="col p-0">
                            <button class="btn btn-primary btn-sm" style="width:80px" @onclick="OnSend">Send</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </EditForm>
</div>
<NeuronSearchBox @bind-IsVisible="@this.IsSearchNeuronVisible" @bind-SelectedNeuron="this.RegionNeuron"/>

@code {
    private EditorNeuronViewModel editorNeuronViewModel = new EditorNeuronViewModel();

    [Parameter]
    public string AvatarUrl { get; set; }

    private ContextMenuOption selectedOption { get; set; }
    [Parameter]
    public ContextMenuOption SelectedOption
    {
        get => this.selectedOption;
        set
        {
            if (this.selectedOption != value)
            {
                this.selectedOption = value;
                this.SelectedOptionChanged.InvokeAsync(this.selectedOption);
            }
        }
    }

    [Parameter]
    public EventCallback<ContextMenuOption> SelectedOptionChanged { get; set; }

    private NeuronViewModel selectedNeuron;
    [Parameter]
    public NeuronViewModel SelectedNeuron
    {
        get => this.selectedNeuron;
        set
        {
            if (this.selectedNeuron != value)
            {
                this.selectedNeuron = value;
                if (this.selectedNeuron != null)
                {
                    if (this.SelectedOption == ContextMenuOption.Edit)
                    {
                        this.editorNeuronViewModel.Id = this.selectedNeuron.Neuron.Id;
                        this.editorNeuronViewModel.Tag = this.selectedNeuron.Tag;
                        // TODO: this.editorNeuronViewModel.Effect = targetNeuron.Effect;
                        //this.editorNeuronViewModel.Strength = targetNeuron.Strength;
                        //this.editorNeuronViewModel.RelativeType = targetNeuron.RelativeType;
                        //this.editorNeuronViewModel.RegionId = targetNeuron.RegionId;
                        //this.editorNeuronViewModel.RegionName = targetNeuron.RegionName;
                        this.editorNeuronViewModel.Version = this.selectedNeuron.Neuron.Version;
                    }
                }
            }

            if (this.selectedNeuron == null)
                this.editorNeuronViewModel.Initialize();
        }
    }

    public NeuronViewModel RegionNeuron { get; set; }

    private bool IsSearchNeuronVisible { get; set; } = false;

    private async Task OnSend()
    {
        if (
            !string.IsNullOrEmpty(this.editorNeuronViewModel.Tag) &&
            QueryUrl.TryParse(this.AvatarUrl, out QueryUrl result)
            )
        {
            switch (this.SelectedOption)
            {
                case ContextMenuOption.New:
                    await this.NeuronApplicationService.CreateNeuron(
                        result.AvatarUrl,
                        Guid.NewGuid().ToString(),
                        this.editorNeuronViewModel.Tag,
                        this.RegionNeuron != null ? this.RegionNeuron.Neuron.Id : null
                        );
                    break;
                case ContextMenuOption.Edit:
                    await this.NeuronApplicationService.ChangeNeuronTag(result.AvatarUrl, this.editorNeuronViewModel.Id, this.editorNeuronViewModel.Tag, this.editorNeuronViewModel.Version);
                    break;
                case ContextMenuOption.AddRelative:
                    await ei8.Cortex.Diary.Port.Adapter.UI.ViewModels.Helper.CreateRelativeCore(
                        this.NeuronApplicationService,
                        this.TerminalApplicationService,
                        result.AvatarUrl,
                        this.RegionNeuron != null ? this.RegionNeuron.Neuron.Id : null,
                        this.SelectedNeuron.Neuron.Id,
                        this.editorNeuronViewModel.RelativeType.Value,
                        this.editorNeuronViewModel.Tag,
                        this.editorNeuronViewModel.Effect.Value,
                        this.editorNeuronViewModel.Strength.Value
                        );
                    break;
            }

            Blazor.Helper.ReinitializeOption(o => this.SelectedOption = o);
        }
    }

    private async Task OnCancel()
    {
        // TODO: ask user if sure to proceed, all unsaved changes (if any) will be lost        
        Blazor.Helper.ReinitializeOption(o => this.SelectedOption = o);
    }

    private void OnSearchNeuron()
    {
        this.IsSearchNeuronVisible = true;
    }

    private string GetOptionDescriptionFormat()
    {
        string result = string.Empty;
        switch (this.SelectedOption)
        {
            case ContextMenuOption.AddRelative:
                result = "Adding New Relative to '{0}'";
                break;
            case ContextMenuOption.LinkRelative:
                result = "Linking existing Relative to '{0}'";
                break;
            case ContextMenuOption.Edit:
                result = "Editing '{0}'";
                break;
        }
        return result;
    }
}
