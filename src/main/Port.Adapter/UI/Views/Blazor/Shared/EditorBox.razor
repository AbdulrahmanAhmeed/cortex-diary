@using ei8.Cortex.Diary.Port.Adapter.UI.Views.Blazor.Data
@using ei8.Cortex.Diary.Application.Neurons;
@using ei8.Cortex.Library.Client;
@using ei8.Cortex.Diary.Port.Adapter.UI.Common;
@using ei8.Cortex.Diary.Port.Adapter.UI.ViewModels;
@inject INeuronApplicationService NeuronApplicationService;

<EditForm Model="@editorNeuronViewModel" style="width: 100%; height: 100%">
    <table style="width: 100%; height: 100%">
        <tr>
            <td style="width: 100%; height: 100%; padding: 0px; vertical-align:bottom;" rowspan="2">
                <InputTextArea placeholder="Tag" @bind-Value="@editorNeuronViewModel.Tag" style="width: 100%; height: 90%" />
            </td>
            <td style="vertical-align: top; padding-left: 5px; padding-bottom: 3px;">
                <button @onclick="OnCancel">Cancel</button>
            </td>
        </tr>
        <tr>
            <td style="vertical-align: bottom; padding-left: 5px; padding-bottom: 3px;">
                <button @onclick="OnSend">Send</button>
            </td>
        </tr>
    </table>
</EditForm>
@code {
    private EditorNeuronViewModel editorNeuronViewModel = new EditorNeuronViewModel();

    protected async override Task OnInitializedAsync()
    {
        switch (this.SelectedOption)
        {
            case ContextMenuOption.New:
                this.SelectedNeuron = null;
                break;
            case ContextMenuOption.Edit:
                var targetNeuron = this.SelectedNeuron;
                if (targetNeuron != null)
                {
                    this.editorNeuronViewModel.Id = targetNeuron.Neuron.Id;
                    this.editorNeuronViewModel.Tag = targetNeuron.Tag;
                    // TODO: this.editorNeuronViewModel.Effect = targetNeuron.Effect;
                    //this.editorNeuronViewModel.Strength = targetNeuron.Strength;
                    //this.editorNeuronViewModel.RelativeType = targetNeuron.RelativeType;
                    //this.editorNeuronViewModel.RegionId = targetNeuron.RegionId;
                    //this.editorNeuronViewModel.RegionName = targetNeuron.RegionName;
                    this.editorNeuronViewModel.Version = targetNeuron.Neuron.Version;
                }
                break;
        }
    }

    [Parameter]
    public string AvatarUrl { get; set; }

    [Parameter]
    public ContextMenuOption SelectedOption { get; set; }

    [Parameter]
    public NeuronViewModel SelectedNeuron { get; set; }

    private async Task OnSend()
    {
        if (
            !string.IsNullOrEmpty(this.editorNeuronViewModel.Tag) &&
            QueryUrl.TryParse(this.AvatarUrl, out QueryUrl result)
            )
        {
            switch (this.SelectedOption)
            {
                case ContextMenuOption.New:
                    await this.NeuronApplicationService.CreateNeuron(result.AvatarUrl, Guid.NewGuid().ToString(), this.editorNeuronViewModel.Tag, string.Empty);
                    break;
                case ContextMenuOption.Edit:
                    await this.NeuronApplicationService.ChangeNeuronTag(result.AvatarUrl, this.editorNeuronViewModel.Id, this.editorNeuronViewModel.Tag, this.editorNeuronViewModel.Version);
                    break;
            }

            this.Initialize();
        }
    }

    private async Task OnCancel()
    {
        // TODO: ask user if sure to proceed, all unsaved changes (if any) will be lost        
        this.Initialize();
    }

    private void Initialize()
    {
        this.editorNeuronViewModel.Initialize();
        this.SelectedNeuron = null;
        this.SelectedOption = ContextMenuOption.New;
    }
}
