@using ei8.Cortex.Diary.Port.Adapter.UI.Views.Blazor.ViewModels;

@if (this.IsVisible)
{
    <div class="modal" tabindex="-1" style="display:block" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title">Neuron Info</h3>
                    <!-- Button to close the popup -->
                    <button type="button" class="close" @onclick="() => this.IsVisible = false">
                        <span aria-hidden="true">X</span>
                    </button>
                </div>
                <!-- Edit form for the current forecast -->
                <div class="modal-body">
                    <table style="width: 100%; height: 100%">
                        <tr>
                            <td style="vertical-align: bottom; padding-left: 5px; padding-bottom: 3px;">
                                @this.selectedNeuron.Neuron.Tag
                            </td>
                            <td style="vertical-align: bottom; padding-left: 5px; padding-bottom: 3px;">
                                
                            </td>
                        </tr>
                        <tr>
                            <td style="vertical-align: bottom; padding-left: 5px; padding-bottom: 3px;">
                                
                            </td>
                            <td style="vertical-align: bottom; padding-left: 5px; padding-bottom: 3px;">
                                
                            </td>
                        </tr>
                    </table>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private bool isVisible;
    [Parameter]
    public bool IsVisible
    {
        get => this.isVisible;
        set
        {
            if (this.isVisible != value)
            {
                this.isVisible = value;
                this.IsVisibleChanged.InvokeAsync(this.isVisible);
            }
        }
    }

    [Parameter]
    public EventCallback<bool> IsVisibleChanged { get; set; }

    private NeuronViewModel selectedNeuron { get; set; }
    [Parameter]
    public NeuronViewModel SelectedNeuron
    {
        get => this.selectedNeuron;
        set
        {
            if (this.selectedNeuron != value)
            {
                this.selectedNeuron = value;
                this.SelectedNeuronChanged.InvokeAsync(this.selectedNeuron);
            }
        }
    }

    [Parameter]
    public EventCallback<NeuronViewModel> SelectedNeuronChanged { get; set; }
}
