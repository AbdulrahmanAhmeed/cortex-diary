@using ei8.Cortex.Diary.Application.Neurons;
@using ei8.Cortex.Diary.Domain.Model;
@using ei8.Cortex.Diary.Port.Adapter.UI.Views.Blazor.ViewModels;
@using ei8.Cortex.Diary.Port.Adapter.UI.Common;
@using ei8.Cortex.Diary.Port.Adapter.UI.Views.Blazor.Shared;
@inject INeuronQueryService NeuronQueryService;

@if (this.IsVisible)
{
    <div class="modal" tabindex="-1" style="display:block" role="dialog">
        <div class="modal-dialog modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title">Select Neuron</h3>
                    <!-- Button to close the popup -->
                    <button type="button" class="close" @onclick="() => this.SelectNeuron(null)">
                        <span aria-hidden="true">X</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="container">
                        <div class="row">
                            <div class="col-auto p-0 pr-1">
                                <button class="btn btn-primary btn-sm" @onclick="this.Load">Reload</button>
                            </div>
                            <div class="col p-0">
                                <input class="form-control form-control-sm ml-1" placeholder="Avatar URL" @bind="AvatarUrl" />
                            </div>
                        </div>
                        <div class="row pt-2">
                            <div class="col p-0">
                                <EditForm Model="this">
                                    <ListView Items="@this.Children" Render="@true">
                                        <HeaderTitle>
                                            <h6>Search Results</h6>
                                        </HeaderTitle>
                                        <ItemTemplate Context="itemContext">
                                            <ConditionalDisplay Show="@true">
                                                <li style="list-style:none" @key="@itemContext.Neuron.Id">
                                                    <input type="radio" id="@itemContext.Neuron.Id" checked="@(this.TempSelectedNeuron == itemContext)" @onchange="@(() => { this.TempSelectedNeuron = itemContext; })" />
                                                    <label for="@itemContext.Neuron.Tag">@(!string.IsNullOrEmpty(itemContext.Neuron.Tag) ? itemContext.Neuron.Tag : " ")</label>
                                                </li>
                                            </ConditionalDisplay>
                                        </ItemTemplate>
                                    </ListView>
                                </EditForm>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary btn-sm" @onclick="this.Select">Select</button>
                </div>
            </div>
        </div>
    </div>
}
@code {
    protected override void OnInitialized()
    {
        this.Children = new NeuronViewModel[0];
    }

    private string AvatarUrl { get; set; }

    private NeuronViewModel[] Children { get; set; } = new NeuronViewModel[0];

    private bool isVisible;
    [Parameter]
    public bool IsVisible
    {
        get => this.isVisible;
        set
        {
            if (this.isVisible != value)
            {
                this.isVisible = value;
                this.IsVisibleChanged.InvokeAsync(this.isVisible);
            }
        }
    }

    [Parameter]
    public EventCallback<bool> IsVisibleChanged { get; set; }

    private void SelectNeuron(NeuronViewModel value)
    {
        this.IsVisible = false;
        this.SelectedNeuron = value;
    }

    private NeuronViewModel TempSelectedNeuron { get; set; }

    private NeuronViewModel selectedNeuron { get; set; }
    [Parameter]
    public NeuronViewModel SelectedNeuron
    {
        get => this.selectedNeuron;
        set
        {
            if (this.selectedNeuron != value)
            {
                this.selectedNeuron = value;
                this.SelectedNeuronChanged.InvokeAsync(this.selectedNeuron);
            }
        }
    }
        
    [Parameter]
    public SignInInfo SelectedSignInInfo { get; set; }
    
    [Parameter]
    public EventCallback<NeuronViewModel> SelectedNeuronChanged { get; set; }

    private async Task Load()
    {
        var children = new List<NeuronViewModel>();
        var ns = (await NeuronQueryService.SendQuery(this.AvatarUrl, this.SelectedSignInInfo.AuthAccessToken)).Neurons;
        ns.ToList().ForEach(n => children.Add(new NeuronViewModel(new UINeuron(n), this.AvatarUrl, this.SelectedSignInInfo.AuthAccessToken, this.NeuronQueryService)));
        this.Children = children.ToArray();
    }

    private async Task Select()
    {
        this.IsVisible = false;
        this.SelectedNeuron = this.TempSelectedNeuron;
    }
}