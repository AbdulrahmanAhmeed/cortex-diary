@page "/"
@using ei8.Cortex.Diary.Port.Adapter.IO.Process.Services.Identity
@using Microsoft.AspNetCore.Authentication
@using System.Globalization

@namespace ei8.Cortex.Diary.Port.Adapter.UI.Views.Blazor.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>d# neurUL Studio</title>
    <base href="~/" />
    <link rel="stylesheet" href="css/bootstrap/bootstrap.min.css" />
    <link href="css/site.css" rel="stylesheet" />
    <script type="text/javascript">
        var receiveMessage = function (event) {
            if (document.getElementById('currentUrl') != null) {
                document.getElementById('currentUrl').value = event.data;
            }
        }

        window.addEventListener('message', receiveMessage, false);

        var BlazorScrollToId = function (id) {
            debugger;
            const element = document.getElementById(id);
            if (element instanceof HTMLElement) {
                element.scrollIntoView({
                    behavior: "smooth",
                    block: "start",
                    inline: "nearest"
                });
            }
        }
    </script>
    <link rel="stylesheet" href="https://pro.fontawesome.com/releases/v5.10.0/css/all.css" integrity="sha384-AYmEC3Yw5cVb3ZcuHtOA93w35dYTsvhLPVnYs9eStHfGJvOvKxVfELGroGkvsg+p" crossorigin="anonymous" />
    <link href="_content/Blazored.Toast/blazored-toast.css" rel="stylesheet" />
</head>
<body>
    @{
        var initialTokenState = new InitialApplicationState
        {
            XsrfToken = Xsrf.GetAndStoreTokens(HttpContext).RequestToken,
            AccessToken = await HttpContext.GetTokenAsync("access_token"),
            RefreshToken = await HttpContext.GetTokenAsync("refresh_token")
        };

        var expiresAt = await HttpContext.GetTokenAsync("expires_at");
        if (DateTimeOffset.TryParse(expiresAt,
            CultureInfo.InvariantCulture,
            DateTimeStyles.None,
            out var expiration))
        {
            initialTokenState.ExpiresAt = expiration;
        }
        else
        {
            initialTokenState.ExpiresAt = DateTimeOffset.UtcNow;
        }
    }

    <app>
        <component type="typeof(App)" render-mode="ServerPrerendered" param-InitialState="initialTokenState" />
    </app>

    <script src="_framework/blazor.server.js"></script>
    <script src="JsInterop.js"></script>
    <script src="https://d3js.org/d3.v3.min.js"></script>
    <script>

        function displayGraph(nodes, links) {
            var width = 500,
                height = 500;

            var force = d3.layout.force()
                .nodes(d3.values(nodes))
                .links(links)
                .size([width, height])
                .linkDistance(60)
                .charge(-300)
                .on("tick", tick)
                .start();

            var drag = force.drag()
                .on("dragstart", dragstart);

            d3.selectAll("svg > *").remove();

            var svg = d3.select("svg")
                .attr("width", width)
                .attr("height", height);

            // Per-type markers, as they don't inherit styles.
            svg.append("defs").selectAll("marker")
                .data(["fullexcite", "fullinhibit", "partialexcite", "partialinhibit"])
                .enter().append("marker")
                .attr("id", function (d) { return d; })
                .attr("viewBox", "0 -5 10 10")
                .attr("refX", 15)
                .attr("refY", -1.5)
                .attr("markerWidth", 6)
                .attr("markerHeight", 6)
                .attr("orient", "auto")
                .append("path")
                .attr("d", "M0,-5L10,0L0,5")
                .attr("fill", function (d) { if (d.includes("inhibit")) { return "#f00"; } else { return "#000"; }});

            var path = svg.append("g").selectAll("path")
                .data(force.links())
                .enter().append("path")
                .attr("class", function (d) { return "link " + d.type; })
                .attr("marker-end", function (d) { return "url(#" + d.type + ")"; });

            var circle = svg.append("g").selectAll("circle")
                .data(force.nodes())
                .enter().append("circle")
                .attr("r", 6)
                .on("dblclick", dblclick)
                .call(drag);

            var text = svg.append("g").selectAll("text")
                .data(force.nodes())
                .enter().append("text")
                .attr("x", -7)
                .attr("y", 17)
                .text(function (d) { return d.tag; });

            // Use elliptical arc path segments to doubly-encode directionality.
            function tick() {
                path.attr("d", linkArc);
                circle.attr("transform", transform);
                text.attr("transform", transform);
            }

            function linkArc(d) {

                //var x0 = d.source.x;
                //var y0 = d.source.y;
                //var x1 = d.target.x;
                //var y1 = d.target.y;
                //var xcontrol = x1 * 0.5 + x0 * 0.5;
                //return ["M", x0, y0, "C", xcontrol, y0, xcontrol, y1, x1, y1].join(" ");

                var dx = d.target.x - d.source.x,
                    dy = d.target.y - d.source.y,
                    dr = Math.sqrt(dx * dx + dy * dy);
                return "M" + d.source.x + "," + d.source.y + "A" + dr + "," + dr + " 0 0,1 " + d.target.x + "," + d.target.y;
            }

            function transform(d) {
                return "translate(" + d.x + "," + d.y + ")";
            }

            function dragstart(d) {
                d.fixed = true;
            }

            function dblclick(d) {
                d.fixed = false;
            }
        }
    </script>
</body>
</html>
