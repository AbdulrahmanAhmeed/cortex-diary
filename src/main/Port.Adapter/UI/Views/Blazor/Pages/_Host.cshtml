@page "/"
@using ei8.Cortex.Diary.Port.Adapter.IO.Process.Services.Identity
@using Microsoft.AspNetCore.Authentication
@using System.Globalization

@namespace ei8.Cortex.Diary.Port.Adapter.UI.Views.Blazor.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>d# neurUL Studio</title>
    <base href="~/" />
    <link rel="stylesheet" href="css/bootstrap/bootstrap.min.css" />
    <link href="css/site.css" rel="stylesheet" />
    <script type="text/javascript">
        var receiveMessage = function (event) {
            if (document.getElementById('currentUrl') != null) {
                document.getElementById('currentUrl').value = event.data;
            }
        }

        window.addEventListener('message', receiveMessage, false);

        var BlazorScrollToId = function (id) {
            debugger;
            const element = document.getElementById(id);
            if (element instanceof HTMLElement) {
                element.scrollIntoView({
                    behavior: "smooth",
                    block: "start",
                    inline: "nearest"
                });
            }
        }
    </script>
    <link rel="stylesheet" href="https://pro.fontawesome.com/releases/v5.10.0/css/all.css" integrity="sha384-AYmEC3Yw5cVb3ZcuHtOA93w35dYTsvhLPVnYs9eStHfGJvOvKxVfELGroGkvsg+p" crossorigin="anonymous" />
    <link href="_content/Blazored.Toast/blazored-toast.css" rel="stylesheet" />
</head>
<body>
    @{
        var initialTokenState = new InitialApplicationState
        {
            XsrfToken = Xsrf.GetAndStoreTokens(HttpContext).RequestToken,
            AccessToken = await HttpContext.GetTokenAsync("access_token"),
            RefreshToken = await HttpContext.GetTokenAsync("refresh_token")
        };

        var expiresAt = await HttpContext.GetTokenAsync("expires_at");
        if (DateTimeOffset.TryParse(expiresAt,
            CultureInfo.InvariantCulture,
            DateTimeStyles.None,
            out var expiration))
        {
            initialTokenState.ExpiresAt = expiration;
        }
        else
        {
            initialTokenState.ExpiresAt = DateTimeOffset.UtcNow;
        }
    }

    <app>
        <component type="typeof(App)" render-mode="ServerPrerendered" param-InitialState="initialTokenState" />
    </app>

    <script src="_framework/blazor.server.js"></script>
    <script src="JsInterop.js"></script>
</body>
</html>
