@using ei8.Cortex.Diary.Application.Neurons;
@using ei8.Cortex.Diary.Port.Adapter.UI.Views.Blazor.ViewModels;

<ul @attributes="SetRootStyle()">
    @if (this.Children != null)
    {
        string lastAuthor = string.Empty;
        @foreach (var child in Children)
        {
            string currentAuthor = (child.Neuron.Creation?.Author?.Tag + ((child.Neuron.Creation?.Author?.Id != child.Neuron.UnifiedLastModification?.Author?.Id) ? ", " + child.Neuron.UnifiedLastModification.Author.Tag : string.Empty));
            <li class="p-0 my-1" @onmouseout="() => child.ShowControls(false)" style="list-style-type: none;">
                <div class="container m-0">
                    @if (currentAuthor != lastAuthor)
                    {
                        lastAuthor = currentAuthor;
                        <div class="row">
                            <div class="col-auto p-1" />
                            <div class="col-auto pl-2">                            
                                <small style="font-size:x-small">
                                    @lastAuthor
                                </small>                            
                            </div>
                        </div>
                    }
                    <div class="row">
                        <div class="col-auto p-1" style="font-family:monospace" @onclick="child.Toggle">
                            @if (@child.GetIcon() == "+")
                            {
                                <span class="small text-secondary">&#x25B7;</span>
                            }
                            else
                            {
                                <span class="small text-secondary">&#x25E2;</span>
                            }
                            <span @attributes="GetAttributes(child)">
                                @if (child.Neuron.Type != Library.Common.RelativeType.NotSet)
                                {
                                    if (child.Neuron.Terminal.Strength == "1")
                                    {
                                        @if (child.Neuron.Type == Library.Common.RelativeType.Postsynaptic)
                                        {
                                            <span>&#x21FE;</span>
                                        }
                                        else
                                        {
                                            <span>&#x21FD;</span>
                                        }
                                    }
                                    else
                                    {
                                        @if (child.Neuron.Type == Library.Common.RelativeType.Postsynaptic)
                                        {
                                            <span>&#x290F;</span>
                                        }
                                        else
                                        {
                                            <span>&#x290E;</span>
                                        }
                                    }
                                }
                            </span>
                        </div>
                        <div class="col-auto p-1" @onmouseover="() => child.ShowControls(true)" @onmouseout="() => child.ShowControls(false)" style="@this.GetStyleByCreationAuthor(child.Neuron.IsCurrentUserCreationAuthor)">
                            @child.Tag                            
                            @if (child.AreControlsVisible && this.CanShowControls)
                            {
                                <button style="height: 1rem; vertical-align: bottom; font-size:x-small;" @onclick="() => this.RequestItemMenu(child)">...</button>
                                <button style="height: 1rem; vertical-align: bottom; font-size:x-small;" @onclick="() => this.RequestItemInfo(child)">info</button>
                            }
                        </div>
                    </div>
                    @if (child.IsExpanded)
                    {
                        <div class="row">
                            <TreeView Children="@child.Children" AvatarUrl="@this.AvatarUrl" @bind-SelectedNeuron="@this.SelectedNeuron" OnMenuRequested="@this.MenuRequested" OnInfoRequested="@this.InfoRequested" @bind-CanShowControls="@this.CanShowControls" IsRoot="false" />
                        </div>
                    }
                    @if (this.renderDirection == RenderDirectionValue.BottomToTop && this.Children.LastOrDefault() == child)
                    {
                        <div class="row">
                            <h1 id="bottom" />
                        </div>
                    }
                </div>
            </li>
        }
    }
</ul>

@code {        
    [Parameter]
    public IList<NeuronViewModel> Children { get; set; } = new List<NeuronViewModel>();

    [Parameter]
    public bool IsRoot { get; set; } = true;

    [Parameter]
    public string AvatarUrl { get; set; }

    [Parameter]
    public EventCallback OnMenuRequested { get; set; }

    [Parameter]
    public EventCallback OnInfoRequested { get; set; }

    [Parameter]
    public EventCallback<RenderDirectionValue> RenderDirectionChanged { get; set; }

    private RenderDirectionValue renderDirection;
    [Parameter]
    public RenderDirectionValue RenderDirection
    {
        get => this.renderDirection;
        set
        {
            if (this.renderDirection != value)
            {
                this.renderDirection = value;
                this.RenderDirectionChanged.InvokeAsync(this.renderDirection);
            }
        }
    }

    [Parameter]
    public EventCallback<NeuronViewModel> SelectedNeuronChanged { get; set; }

    private NeuronViewModel selectedNeuron;
    [Parameter]
    public NeuronViewModel SelectedNeuron
    {
        get => this.selectedNeuron;
        set
        {
            if (this.selectedNeuron != value)
            {
                this.selectedNeuron = value;
                this.SelectedNeuronChanged.InvokeAsync(this.selectedNeuron);
            }
        }
    }

    [Parameter]
    public EventCallback<bool> CanShowControlsChanged { get; set; }

    private bool canShowControls;
    [Parameter]
    public bool CanShowControls
    {
        get => this.canShowControls;
        set
        {
            if (this.canShowControls != value)
            {
                this.canShowControls = value;
                this.CanShowControlsChanged.InvokeAsync(this.canShowControls);
            }
        }
    }
    private string GetStyleByCreationAuthor(bool isCurrentUserCreationAuthor)
    {
        string result = "border-radius:.40rem; ";
        if (isCurrentUserCreationAuthor)
            result += "background-color: #2c87f0; color: #ffffff";
        else
            result += "background-color: #e6e6e6; ";
        return result;
    }

    private async void RequestItemMenu(NeuronViewModel neuronViewModel)
    {
        neuronViewModel.ShowControls(false);
        this.SelectedNeuron = neuronViewModel;
        this.MenuRequested();
    }

    private async void RequestItemInfo(NeuronViewModel neuronViewModel)
    {
        neuronViewModel.ShowControls(false);
        this.SelectedNeuron = neuronViewModel;
        this.InfoRequested();
    }

    private async void MenuRequested()
    {
        await this.OnMenuRequested.InvokeAsync(this);
    }

    private async void InfoRequested()
    {
        await this.OnInfoRequested.InvokeAsync(this);
    }

    Dictionary<string, object> SetRootStyle()
    {
        var dict = new Dictionary<string, object>();
        if (this.IsRoot) dict.Add("style", "padding-left:3px");
        return dict;
    }

    private Dictionary<string, object> GetAttributes(NeuronViewModel child)
    {
        var dict = new Dictionary<string, object>();
        if (child.Neuron.Terminal.Effect == "-1")
            dict.Add("style", "color:red");
        return dict;

    }
}
