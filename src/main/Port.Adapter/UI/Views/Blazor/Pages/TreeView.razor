@using Blazor.Data
@using ei8.Cortex.Diary.Application.Neurons;
@using ei8.Cortex.Diary.Port.Adapter.UI.ViewModels;

<ul>
    @foreach (var child in Children)
    {
        <li @onmouseout="() => child.ShowControls(false)" style="list-style-type: none;">
            <span @onclick="child.Toggle">@child.GetIcon()</span>
            <span @onmouseover="() => child.ShowControls(true)" @onmouseout="() => child.ShowControls(false)">
                @child.Tag
                @if (child.AreControlsVisible)
                {
                    <button style="height: 1rem; vertical-align: bottom; font-size:x-small;" @onclick="() => this.RequestItemMenu(child)">...</button>
                }
            </span>
            @if (child.IsExpanded)
            {
                <div>
                    <TreeView Children="@child.Children" AvatarUrl="@this.AvatarUrl"></TreeView>
                </div>
            }
        </li>
    }
</ul>

@code {
    protected override void OnInitialized()
    {
        this.Children = new NeuronViewModel[0];
    }

    [Parameter]
    public NeuronViewModel[] Children { get; set; }

    [Parameter]
    public string AvatarUrl { get; set; }

    [Parameter]
    public EventCallback OnMenuRequested { get; set; }

    [Parameter]
    public EventCallback<NeuronViewModel> SelectedNeuronChanged { get; set; }

    private NeuronViewModel selectedNeuron;
    [Parameter]
    public NeuronViewModel SelectedNeuron
    {
        get => this.selectedNeuron;
        set
        {
            if (this.selectedNeuron != value)
            {
                this.selectedNeuron = value;
                this.SelectedNeuronChanged.InvokeAsync(this.selectedNeuron);
            }
        }
    }

    private async void RequestItemMenu(NeuronViewModel neuronViewModel)
    {
        this.SelectedNeuron = neuronViewModel;
        await this.OnMenuRequested.InvokeAsync(this);
    }
}
