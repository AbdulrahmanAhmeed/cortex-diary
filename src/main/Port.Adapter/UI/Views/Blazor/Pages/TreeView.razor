@using Blazor.Data
@using ei8.Cortex.Diary.Application.Neurons;
@using ei8.Cortex.Diary.Port.Adapter.UI.ViewModels;

<ul>
    @if (this.Children != null)
    {
        @foreach (var child in Children)
        {
            <li @onmouseout="() => child.ShowControls(false)" style="list-style-type: none;">
                <span @onclick="child.Toggle">@child.GetIcon()</span>
                <span @onmouseover="() => child.ShowControls(true)" @onmouseout="() => child.ShowControls(false)">
                    @child.Tag
                    @if (child.AreControlsVisible && this.CanShowControls)
                    {
                        <button style="height: 1rem; vertical-align: bottom; font-size:x-small;" @onclick="() => this.RequestItemMenu(child)">...</button>
                    }
                </span>
                @if (child.IsExpanded)
                {
                    <div>
                        <TreeView Children="@child.Children" AvatarUrl="@this.AvatarUrl" @bind-SelectedNeuron="@this.SelectedNeuron" OnMenuRequested="@this.MenuRequested" @bind-CanShowControls="@this.CanShowControls"/>
                    </div>
                }
            </li>
        }
    }
</ul>

@code {
    [Parameter]
    public NeuronViewModel[] Children { get; set; } = new NeuronViewModel[0];

    [Parameter]
    public string AvatarUrl { get; set; }

    [Parameter]
    public EventCallback OnMenuRequested { get; set; }

    [Parameter]
    public EventCallback<NeuronViewModel> SelectedNeuronChanged { get; set; }

    private NeuronViewModel selectedNeuron;
    [Parameter]
    public NeuronViewModel SelectedNeuron
    {
        get => this.selectedNeuron;
        set
        {
            if (this.selectedNeuron != value)
            {
                this.selectedNeuron = value;
                this.SelectedNeuronChanged.InvokeAsync(this.selectedNeuron);
            }
        }
    }

    [Parameter]
    public EventCallback<bool> CanShowControlsChanged { get; set; }

    private bool canShowControls;
    [Parameter]
    public bool CanShowControls
    {
        get => this.canShowControls;
        set
        {
            if (this.canShowControls != value)
            {
                this.canShowControls = value;
                this.CanShowControlsChanged.InvokeAsync(this.canShowControls);
            }
        }
    }

    private async void RequestItemMenu(NeuronViewModel neuronViewModel)
    {
        this.SelectedNeuron = neuronViewModel;
        this.MenuRequested();
    }

    private async void MenuRequested()
    {
        await this.OnMenuRequested.InvokeAsync(this);
    }
}
