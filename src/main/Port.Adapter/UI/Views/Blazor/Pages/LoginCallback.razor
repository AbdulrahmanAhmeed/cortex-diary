@page "/Account/LoginCallback"
@using ei8.Cortex.Diary.Application.Settings
@using ei8.Cortex.Diary.Application.Identity
@using ei8.Cortex.Diary.Domain.Model
@using ei8.Cortex.Diary.Port.Adapter.IO.Process.Services.Identity
@inject ISettingsService SettingsService
@inject IIdentityService IdentityService
@inject NavigationManager NavManager
@inject ISignInInfoService signInInfoService

<h3>@successMessage</h3>
@code {
    private string successMessage = "Initial";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var url = this.NavManager.Uri;
            var result = ProcessUrlResult.Empty;

            var signInInfo = signInInfoService.SignIns.Single(sii => sii.AuthAccessToken == string.Empty && sii.GivenName != "Anonymous"); // TODO: turn into a constant
            if ((result = await IO.Process.Services.Identity.Helper.TryProcessLoginUrl(
                url,
                SettingsService.LoginCallback,
                IdentityService,
                signInInfo.IdentityServer.TokenEndpoint
            )).Success)
            {
                this.successMessage = "Signed-in";
                signInInfo.AuthAccessToken = result.AccessToken;
                signInInfo.AuthIdToken = result.IdentityToken;
                var uiResponse = await this.IdentityService.GetUserInfoAsync(result.AccessToken, signInInfo.IdentityServer.UserInfoEndpoint);
                signInInfo.Email = uiResponse.Claims.SingleOrDefault(c => c.Type == "email")?.Value;
                signInInfo.FamilyName = uiResponse.Claims.SingleOrDefault(c => c.Type == "family_name")?.Value;
                signInInfo.GivenName = uiResponse.Claims.SingleOrDefault(c => c.Type == "given_name")?.Value;
                this.StateHasChanged();
            }
        }
    }
}
