@page "/notifications"
@using works.ei8.Cortex.Diary.Port.Adapter.UI.Common
@using works.ei8.Cortex.Diary.Application.Notifications
@using works.ei8.Cortex.Diary.Domain.Model.Neurons
@using org.neurul.Common.Events
@inject INotificationApplicationService NotificationApplicationService
@inject INeuronGraphQueryClient NeuronGraphQueryClient
@using works.ei8.Cortex.Diary.Port.Adapter.UI.Views.Blazor.Shared

<div class="top-row px-4">
    <table>
        <tr>
            <td>
                <h4>Notifications</h4>
            </td>
        </tr>
        <tr>
            <td>
                <button @onclick="OnReload">Reload</button>
                <button @onclick="OnMore">More</button>
                <input placeholder="Avatar URL" @bind="AvatarUrl" />
            </td>
            <td>
                <a href="https://docs.microsoft.com/en-us/aspnet/" target="_blank">About</a>
            </td>
        </tr>
    </table>
</div>
<div class="content px-4">    
    <table>
        <thead>
            <tr>
                <th />
            </tr>
        </thead>
        <tbody>
            @foreach (var notif in this.NotificationItems)
            {
                <tr>
                    <td><b>@notif.Author</b> <small>&nbsp; @notif.Timestamp &nbsp; @notif.Type</small> <br /> @notif.Tag </td>
                </tr>
            }
        </tbody>
    </table>
</div>
<div class="footer px-4">
    <EditorBox />
</div>

@code {
    private static readonly IDictionary<string, Neuron> neuronCache = new Dictionary<string, Neuron>();

    public string AvatarUrl { get; set; }

    public NotificationLog NotificationLog { get; set; }

    public IEnumerable<NotificationData> NotificationItems { get; set; } = new NotificationData[0];

    private async Task OnReload()
    {
        this.NotificationLog = await this.NotificationApplicationService.GetNotificationLog(this.AvatarUrl, string.Empty);
        this.NotificationItems = (await Helper.UpdateCacheGetNotifications(this.NotificationLog, NeuronGraphQueryClient, this.AvatarUrl, neuronCache));
    }

    private async Task OnMore()
    {
        this.NotificationLog = await this.NotificationApplicationService.GetNotificationLog(this.AvatarUrl, this.NotificationLog.PreviousNotificationLogId);
        this.NotificationItems = (await Helper.UpdateCacheGetNotifications(this.NotificationLog, NeuronGraphQueryClient, this.AvatarUrl, neuronCache))
            .Concat(this.NotificationItems);
    }
}
