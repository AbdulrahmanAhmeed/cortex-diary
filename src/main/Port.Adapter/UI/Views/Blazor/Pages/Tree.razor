@page "/tree"
@using ei8.Cortex.Diary.Port.Adapter.UI.Common;
@using ei8.Cortex.Diary.Port.Adapter.UI.Views.Blazor.ViewModels;
@using ei8.Cortex.Diary.Application.Neurons;
@using ei8.Cortex.Diary.Port.Adapter.UI.ViewModels;
@using ei8.Cortex.Library.Client;
@using ei8.Cortex.Library.Common;
@using ei8.Cortex.Diary.Port.Adapter.UI.Views.Blazor.Modal;
@using ei8.Cortex.Diary.Port.Adapter.UI.Views.Blazor.Shared;
@inject INeuronQueryService neuronQueryService;
@inject INeuronApplicationService neuronApplicationService;
@inject ITerminalApplicationService terminalApplicationService;
@inject IToastService toastService;

<div class="top-row px-4" style="padding-top:12px">
    <div class="details align-middle ">
        <button class="btn btn-primary btn-sm" @onclick="this.Reload">Reload</button>
        <input class="form-control form-control-sm ml-1" placeholder="Avatar URL" @bind="AvatarUrl" />
    </div>
</div>
<div class="content px-4">
    <TreeView AvatarUrl="@this.AvatarUrl" Children="@this.Children" @bind-SelectedNeuron="@this.SelectedNeuron" OnMenuRequested="@this.MenuRequested" @bind-CanShowControls="@this.CanShowControls" />
</div>
<div class="footer px-4 h-auto">
    <EditorBox AvatarUrl="@this.AvatarUrl" @bind-SelectedNeuron="@this.EditNeuron" @bind-SelectedOption="@this.SelectedOption" />
</div>
<NeuronContextMenu @bind-SelectedOption="@this.SelectedOption" @bind-IsVisible="@this.IsContextMenuVisible" />
<ConfirmationBox Title="Confirm Delete" Message='@this.ProcessSelectionTag("Are you sure you want to delete '{0}'?")' @bind-IsVisible="@this.IsConfirmVisible" OnConfirmCallback="@this.ConfirmDelete" OnCloseCallback="@this.CloseConfirmation" />

@code
{
    protected override void OnInitialized()
    {
        this.Children = new NeuronViewModel[0];
    }

    [Parameter]
    public string AvatarUrl { get; set; }

    [Parameter]
    public NeuronViewModel[] Children { get; set; } = new NeuronViewModel[0];

    private bool IsConfirmVisible { get; set; } = false;

    private bool IsContextMenuVisible { get; set; } = false;

    private ContextMenuOption selectedOption = ContextMenuOption.New;
    public ContextMenuOption SelectedOption
    {
        get => this.selectedOption;
        set
        {
            if (this.selectedOption != value)
            {
                this.selectedOption = value;
                switch (this.SelectedOption)
                {
                    case ContextMenuOption.New:
                        this.SelectedNeuron = null;
                        this.EditNeuron = null;
                        this.CanShowControls = true;
                        break;
                    case ContextMenuOption.Delete:
                        this.IsConfirmVisible = true;
                        break;
                    case ContextMenuOption.Edit:
                    case ContextMenuOption.AddRelative:
                    case ContextMenuOption.LinkRelative:
                        this.CanShowControls = false;
                        this.EditNeuron = this.SelectedNeuron;
                        break;
                }
            }
        }
    }

    private bool CanShowControls { get; set; } = true;

    private NeuronViewModel SelectedNeuron { get; set; } = null;

    private NeuronViewModel editNeuron = null;
    private NeuronViewModel EditNeuron
    {
        get => this.editNeuron;
        set
        {
            this.editNeuron = value;
        }
    }

    private string ProcessSelectionTag(string format) => this.SelectedNeuron is NeuronViewModel ?
            string.Format(format, this.SelectedNeuron.Tag) :
            "[Error: Not a valid Neuron]";

    private async Task Reload()
    {
        try
        {
            var children = new List<NeuronViewModel>();
            var ns = (await this.neuronQueryService.SendQuery(this.AvatarUrl)).Neurons;
            ns.ToList().ForEach(n => children.Add(new NeuronViewModel(new UINeuron(n), this.AvatarUrl, this.neuronQueryService)));
            this.Children = children.ToArray();
        }
        catch (Exception ex)
        {
            this.toastService.ShowError(ex.Message);
        }
    }

    private async void MenuRequested() => this.IsContextMenuVisible = true;

    private async void ConfirmDelete()
    {
        if (QueryUrl.TryParse(this.AvatarUrl, out QueryUrl result))
        {
            try
            {
                string description = string.Empty;

                if (this.SelectedNeuron.Neuron.Type == RelativeType.NotSet)
                {
                    await this.neuronApplicationService.DeactivateNeuron(
                        result.AvatarUrl,
                        this.SelectedNeuron.Neuron.Id,
                        this.SelectedNeuron.Neuron.Version
                        );
                    description = "Neuron removed";
                }
                else
                {
                    await this.terminalApplicationService.DeactivateTerminal(
                        result.AvatarUrl,
                        this.SelectedNeuron.Neuron.Terminal.Id,
                        this.SelectedNeuron.Neuron.Terminal.Version
                        );
                    description = "Terminal removed";
                }
                this.toastService.ShowSuccess($"{description} successfully.");
            }
            catch (Exception ex)
            {
                this.toastService.ShowError(ex.Message);
            }
        }
    }

    private async void CloseConfirmation() => Blazor.Helper.ReinitializeOption(o => this.SelectedOption = o);
}