@page "/tree"
@implements IDisposable
@using ei8.Cortex.Diary.Domain.Model
@using ei8.Cortex.Diary.Port.Adapter.UI.Common
@using ei8.Cortex.Diary.Port.Adapter.UI.Views.Blazor.ViewModels
@using ei8.Cortex.Diary.Application.Neurons
@using ei8.Cortex.Library.Client
@using ei8.Cortex.Library.Common
@using ei8.Cortex.Diary.Port.Adapter.UI.Views.Blazor.Modal
@using ei8.Cortex.Diary.Port.Adapter.UI.Views.Blazor.Graph
@using ei8.Cortex.Diary.Port.Adapter.UI.Views.Blazor.Shared
@using Blazorise.Icons.FontAwesome;
@using ei8.Cortex.Diary.Application.Settings
@using ei8.Cortex.Diary.Application.Identity
@using ei8.Cortex.Diary.Port.Adapter.IO.Process.Services.Settings
@using ei8.Cortex.Diary.Port.Adapter.IO.Process.Services.Identity
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.WebUtilities
@using IdentityServer4
@using System.Timers 
@inject INeuronQueryService neuronQueryService
@inject INeuronApplicationService neuronApplicationService
@inject ITerminalApplicationService terminalApplicationService
@inject IToastService toastService
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime
@inject ISettingsService settingsService
@inject IIdentityService identityService
@inject ISignInInfoService signInInfoService
@inject ITokenProvider tokenProvider

<NeuronContextMenu @bind-SelectedOption="@this.SelectedOption" @bind-IsVisible="@this.IsContextMenuVisible" />
<ConfirmationBox Title="Confirm Delete" Message='@this.ProcessSelectionTag("Are you sure you want to delete '{0}'?")' @bind-IsVisible="@this.IsConfirmVisible" OnConfirmCallback="@this.ConfirmDelete" OnCloseCallback="@this.CloseConfirmation" />
<NeuronInfoBox @bind-SelectedNeuron="@this.SelectedNeuron" @bind-IsVisible="@this.IsInfoVisible" />
<div class="top-row px-4" style="padding-top:12px;z-index:1">
    <div class="details align-middle ">
        <button class="btn btn-light btn-sm rounded-circle" @onclick="this.Reload" style="height:32px;width:32px;" title="Reload">
            <Blazorise.Icon Name="FontAwesomeIcons.Redo" />
            @if (this.NewItemsCount > 0)
            {
                <Badge Pill="true" Color="Color.Danger" style="top:-35px;left:8px;height:14px;font-size:0.6em">@(this.NewItemsCount)</Badge>
            }
        </button>
        <input class="form-control form-control-sm ml-1 rounded" placeholder="Avatar URL" @bind="AvatarUrl" />
        <button class="btn btn-light btn-sm rounded-circle" @onclick="this.LoadGraph" style="height:32px" title="Load Graph">
            <Blazorise.Icon Name="FontAwesomeIcons.ProjectDiagram" />
        </button>
        <Dropdown RightAligned="true" @ref="this.userDropdown">
            <button class="btn btn-light btn-sm ml-1 rounded-circle" @onclick="this.ShowUserMenu" title="Identities">
                @if (this.SelectedSignInInfo.GivenName == SignInInfo.AnonymousGivenName)
                {
                    <Blazorise.Icon Name="FontAwesomeIcons.UserSecret" />
                }
                else
                {
                    <Blazorise.Icon Name="FontAwesomeIcons.UserCircle" />
                }
            </button>
            <Blazorise.DropdownMenu style="width:250px">
                @foreach (SignInInfo si in this.signInInfoService.SignIns)
                {
                    <DropdownItem @onclick="() => this.SelectedSignInInfo = si" Class="@(si == this.SelectedSignInInfo ? "bg-secondary text-white" : string.Empty)">
                        @if (si.GivenName == SignInInfo.AnonymousGivenName)
                        {
                            <Blazorise.Icon Name="FontAwesomeIcons.UserSecret" Class="px-2" />
                        }
                        else
                        {
                            <Blazorise.Icon Name="FontAwesomeIcons.UserCircle" Class="px-2" />
                        }
                        <small>@si.IdentityServer.Url</small> <br />
                        @si.GivenName&nbsp;@si.FamilyName <br />
                        @si.Email <br />
                        <button class="btn btn-light btn-sm ml-1 rounded-circle" @onclick="() => this.SignOutUser(si)" title="Identities">
                            <Blazorise.Icon Name="FontAwesomeIcons.SignOutAlt" />
                        </button>
                    </DropdownItem>
                }
                <DropdownDivider />
                <input class="form-control form-control-xs ml-2 rounded" placeholder="ID Server URL" @bind="this.IdServerUrl" style="width:232px" />
                <AuthorizeView>
                    <NotAuthorized>
                        <DropdownItem>
                            <Blazorise.Icon Name="FontAwesomeIcons.SignInAlt" Class="px-2" />
                            <a href="/loginidp">Sign-In</a>
                        </DropdownItem>
                    </NotAuthorized>
                    <Authorized>
                        <DropdownItem>
                            <Blazorise.Icon Name="FontAwesomeIcons.SignOutAlt" Class="px-2" />
                            <form action="/logoutidp" method="post">
                                <button class="nav-link btn btn-link" type="submit">
                                    <span class="oi oi-list-rich" aria-hidden="true"></span> Log out (@context.User.Identity.Name)
                                </button>
                                <input name="__RequestVerificationToken" type="hidden"
                                       value="@this.tokenProvider.XsrfToken">
                            </form>
                        </DropdownItem>
                    </Authorized>
                </AuthorizeView>
            </Blazorise.DropdownMenu>
        </Dropdown>
        <Dropdown RightAligned="true" @ref="this.optionsDropdown">
            <button class="btn btn-light btn-sm ml-1 rounded-circle" @onclick="this.ShowOptionsMenu" title="Options">
                <Blazorise.Icon Name="FontAwesomeIcons.EllipsisV" Class="px-1" />
            </button>
            <Blazorise.DropdownMenu>
                <DropdownItem @onclick="this.ToggleRenderDirection">
                    <Blazorise.Icon Name="FontAwesomeIcons.Sort" Class="px-2" />
                    @if (this.RenderDirection == RenderDirectionValue.TopToBottom)
                    {
                        @((MarkupString)"First At Top")
                    }
                    else
                    {
                        @((MarkupString)"First At Bottom")
                    }
                </DropdownItem>
            </Blazorise.DropdownMenu>
        </Dropdown>
    </div>
</div>
<div class="content px-0">
    <div class="treecontent">
        <div class="treecontent-item content px-4">
            <TreeView AvatarUrl="@this.AvatarUrl" Children="@this.Children" @bind-SelectedNeuron="@this.SelectedNeuron" OnMenuRequested="@this.MenuRequested" OnInfoRequested="@this.InfoRequested" @bind-ControlsEnabled="@this.ControlsEnabled" @bind-RenderDirection="@this.RenderDirection" />
        </div>
        <div class="treecontent-item sticky-top" style="z-index:0">
            <div class="sticky-top" style="z-index:0">
                <svg class="svgview"/>
            </div>
        </div>
    </div>
</div>

<div class="footer px-4 h-auto">
    <EditorBox AvatarUrl="@this.AvatarUrl" @bind-SelectedNeuron="@this.EditNeuron" @bind-SelectedOption="@this.SelectedOption" SelectedSignInInfo="@this.SelectedSignInInfo" />
</div>

<audio id="sound" src="/media/alert.wav" />

@code
{
    private bool reloading = false;
    private bool expandSubNavSettings;
    private Dropdown userDropdown;
    private Dropdown optionsDropdown;
    private Timer refreshTimer;

    private async Task SignOutUser(SignInInfo value)
    {
        var request = this.identityService.CreateLogoutRequest(value.AuthIdToken, value.IdentityServer.LogoutEndpoint);
        this.navigationManager.NavigateTo(request);
    }

    private async Task LoadIdServer()
    {
        if (Uri.IsWellFormedUriString(this.IdServerUrl, UriKind.Absolute))
        {
            var sii = new SignInInfo();
            sii.IdentityServer.Url = this.IdServerUrl;
            this.signInInfoService.Add(sii);
            this.settingsService.ApplicationUrl = this.navigationManager.BaseUri.TrimEnd('/');
            // TODO: ((SettingsService)this.SettingsService).ClientId = "xamarin"; <---------------- check if clientid stays as d23 in line below
            this.navigationManager.NavigateTo(this.identityService.CreateAuthorizationRequest(sii.IdentityServer.AuthorizeEndpoint)); // works if not using frames and is navigated to as another page
        }
        else
        {
            this.toastService.ShowError("Specified ID Server URL is invalid.");
        }
    }

    private void ShowUserMenu()
    {
        if (this.userDropdown.Visible)
            this.userDropdown.Hide();
        else
            this.userDropdown.Show();

        this.optionsDropdown.Hide();
    }

    private void ShowOptionsMenu()
    {
        if (this.optionsDropdown.Visible)
            this.optionsDropdown.Hide();
        else
            this.optionsDropdown.Show();

        this.userDropdown.Hide();
    }

    private void ToggleRenderDirection()
    {
        this.RenderDirection = this.RenderDirection == RenderDirectionValue.TopToBottom ?
            RenderDirectionValue.BottomToTop :
            RenderDirectionValue.TopToBottom;

        this.optionsDropdown.Hide();
    }

    protected override void OnInitialized()
    {
        this.Children = new List<NeuronViewModel>();
        this.SelectedSignInInfo = this.signInInfoService.SignIns.Single(si => si.IdentityServer.Url == string.Empty);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var uri = this.navigationManager.ToAbsoluteUri(this.navigationManager.Uri);
            if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("direction", out var directionValue) &&
                Enum.TryParse<RenderDirectionValue>(directionValue, out RenderDirectionValue directionEnum)
                )
            {
                this.RenderDirection = directionEnum;
                this.StateHasChanged();
            }
            if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("avatarUrl", out var encodedAvatarUrl))
            {
                Uri uriResult;
                string decodedUrl = Nancy.Helpers.HttpUtility.UrlDecode(encodedAvatarUrl);
                bool validUrl = Uri.TryCreate(decodedUrl, UriKind.Absolute, out uriResult)
                    && (uriResult.Scheme == Uri.UriSchemeHttp || uriResult.Scheme == Uri.UriSchemeHttps);
                if (validUrl)
                {
                    this.AvatarUrl = decodedUrl;
                    await this.Reload();
                    this.StateHasChanged();
                    await this.LoadGraph();
                }
            }

            this.refreshTimer = new Timer();
            this.refreshTimer.Interval = this.settingsService.UpdateCheckInterval;
            this.refreshTimer.Elapsed += OnTimerInterval;
            this.refreshTimer.AutoReset = true;
            // Start the timer
            this.refreshTimer.Enabled = true;
        }

        if (this.RenderDirection == RenderDirectionValue.BottomToTop && this.reloading)
        {
            await this.ScrollToFragment("bottom");
            this.reloading = false;
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async void OnTimerInterval(object sender, ElapsedEventArgs e)
    {
        if (this.Children.Count() > 0)
        {
            try
            {
                var ns = await Tree.GetOrderedNeurons(this);
                var currentLastIndex = ns.ToList().FindLastIndex(nr => nr.Id == this.Children.Last().Neuron.Id);
                var newNeurons = ns.Where((n, i) => i > currentLastIndex && !this.Children.Any(nvm => nvm.Neuron.Id == n.Id));
                if (newNeurons.Count() > 0)
                {
                    if (this.NewItemsCount == 0)
                        await this.jsRuntime.InvokeAsync<string>("PlaySound");

                    this.NewItemsCount += newNeurons.Count();
                    newNeurons.ToList().ForEach(n => this.Children.Add(new NeuronViewModel(new UINeuron(n), this.AvatarUrl, this.SelectedSignInInfo.AuthAccessToken, this.neuronQueryService)));
                    await this.InvokeAsync(() => this.StateHasChanged());
                }
            }
            catch (Exception ex)
            {
                this.toastService.ShowError(ex.ToString());
            }
        }
    }

    public void Dispose()
    {
        // During prerender, this component is rendered without calling OnAfterRender and then immediately disposed
        // this mean timer will be null so we have to check for null or use the Null-conditional operator ? 
        this.refreshTimer?.Dispose();
    }

    private async static Task<IEnumerable<NeuronResult>> GetOrderedNeurons(Tree value)
    {
        var ns = (await value.neuronQueryService.SendQuery(
                    value.AvatarUrl
                    )).Neurons;

        if (value.RenderDirection == RenderDirectionValue.BottomToTop)
            ns = ns.Reverse().ToArray();

        return ns;
    }

    private int NewItemsCount { get; set; } = 0;

    public string IdServerUrl { get; set; }

    [Parameter]
    public string AvatarUrl { get; set; }

    [Parameter]
    public IList<NeuronViewModel> Children { get; set; } = new List<NeuronViewModel>();

    private bool IsConfirmVisible { get; set; } = false;

    private bool IsContextMenuVisible { get; set; } = false;

    private bool IsInfoVisible { get; set; } = false;

    private RenderDirectionValue RenderDirection { get; set; } = RenderDirectionValue.TopToBottom;

    private ContextMenuOption selectedOption = ContextMenuOption.New;
    public ContextMenuOption SelectedOption
    {
        get => this.selectedOption;
        set
        {
            if (this.selectedOption != value)
            {
                this.selectedOption = value;
                switch (this.SelectedOption)
                {
                    case ContextMenuOption.New:
                        this.SelectedNeuron = null;
                        this.EditNeuron = null;
                        this.ControlsEnabled = true;
                        break;
                    case ContextMenuOption.Delete:
                        this.IsConfirmVisible = true;
                        break;
                    case ContextMenuOption.Edit:
                    case ContextMenuOption.AddRelative:
                    case ContextMenuOption.LinkRelative:
                        this.ControlsEnabled = false;
                        this.EditNeuron = this.SelectedNeuron;
                        break;
                }
            }
        }
    }

    private bool ControlsEnabled { get; set; } = true;

    private NeuronViewModel SelectedNeuron { get; set; } = null;

    private NeuronViewModel editNeuron = null;
    private NeuronViewModel EditNeuron
    {
        get => this.editNeuron;
        set
        {
            this.editNeuron = value;
        }
    }

    private SignInInfo selectedSignInInfo;

    public SignInInfo SelectedSignInInfo
    {
        get { return selectedSignInInfo; }
        set
        {
            if (this.selectedSignInInfo != value)
            {
                this.selectedSignInInfo = value;

                if (this.userDropdown != null)
                    this.userDropdown.Hide();
            }
        }
    }

    private string ProcessSelectionTag(string format) => this.SelectedNeuron is NeuronViewModel ?
            string.Format(format, this.SelectedNeuron.Tag) :
            "[Error: Not a valid Neuron]";

    private async Task Reload()
    {
        try
        {
            this.reloading = true;
            this.Children.Clear();
            var children = new List<NeuronViewModel>();
            var ns = await Tree.GetOrderedNeurons(this);
            ns.ToList().ForEach(n => children.Add(new NeuronViewModel(new UINeuron(n), this.AvatarUrl, this.SelectedSignInInfo.AuthAccessToken, this.neuronQueryService)));
            ((List<NeuronViewModel>)this.Children).AddRange(children.ToArray());
            this.NewItemsCount = 0;
        }
        catch (Exception ex)
        {
            this.toastService.ShowError(ex.Message);
        }
    }

    private async Task ScrollToFragment(string elementId)
    {
        // https://github.com/WICG/scroll-to-text-fragment/
        if (!string.IsNullOrEmpty(elementId))
        {
            await this.jsRuntime.InvokeVoidAsync("BlazorScrollToId", elementId);
        }
    }

    private async void MenuRequested() => this.IsContextMenuVisible = true;

    private async void InfoRequested() => this.IsInfoVisible = true;

    private async void ConfirmDelete()
    {
        if (QueryUrl.TryParse(this.AvatarUrl, out QueryUrl result))
        {
            try
            {
                string description = string.Empty;

                if (this.SelectedNeuron.Neuron.Type == RelativeType.NotSet)
                {
                    await this.neuronApplicationService.DeactivateNeuron(
                        result.AvatarUrl,
                        this.SelectedNeuron.Neuron.Id,
                        this.SelectedNeuron.Neuron.Version
                        );
                    description = "Neuron removed";
                }
                else
                {
                    await this.terminalApplicationService.DeactivateTerminal(
                        result.AvatarUrl,
                        this.SelectedNeuron.Neuron.Terminal.Id,
                        this.SelectedNeuron.Neuron.Terminal.Version
                        );
                    description = "Terminal removed";
                }
                this.toastService.ShowSuccess($"{description} successfully.");
            }
            catch (Exception ex)
            {
                this.toastService.ShowError(ex.Message);
            }
        }
    }

    private async void CloseConfirmation() => Blazor.Helper.ReinitializeOption(o => this.SelectedOption = o);

    private async Task LoadGraph()
    {
        var allNodes = new List<Node>();
        Tree.ExtractNodes(this.Children.ToArray(), allNodes);

        var distinctNodes = new List<Node>();
        // get distinct nodes
        allNodes.ForEach(n =>
        {
            if (!distinctNodes.Any(dn => dn.id == n.id))
                distinctNodes.Add(new Node() { id = n.id, tag = n.tag });
        });

        // get links
        var links = new List<Graph.Link>();
        Tree.ExtractLinks(this.Children.ToArray(), distinctNodes, links);

        await this.jsRuntime.InvokeVoidAsync("displayGraph", distinctNodes, links);
    }

    private static void ExtractNodes(IEnumerable<NeuronViewModel> children, List<Node> allNodes)
    {
        allNodes.AddRange(children.Select(c => new Node { id = c.Neuron.Id, tag = c.Tag }).ToArray());

        children.ToList().ForEach(c => Tree.ExtractNodes(c.Children, allNodes));
    }

    private static void ExtractLinks(IEnumerable<NeuronViewModel> children, List<Node> distinctNodes, List<Graph.Link> links)
    {
        children.ToList().ForEach(c =>
        {
            if (c.Neuron.Type != RelativeType.NotSet)
            {
                var tsource = distinctNodes.FindIndex(n => n.id == c.Neuron.Terminal.PresynapticNeuronId);
                var ttarget = distinctNodes.FindIndex(n => n.id == c.Neuron.Terminal.PostsynapticNeuronId);

                var typeVal = (c.Neuron.Terminal.Strength == "1" ? "full" : "partial") + (c.Neuron.Terminal.Effect == "-1" ? "inhibit" : "excite");
                if (!links.Any(gl => gl.source == tsource && gl.target == ttarget))
                    links.Add(new Graph.Link() { source = tsource, target = ttarget, type = typeVal });
            }
        });

        children.ToList().ForEach(c => Tree.ExtractLinks(c.Children.ToArray(), distinctNodes, links));
    }
}